spring:
  profiles:
    active: dev
  application:
    name: cqrs-customer-streams
  kafka:
    bootstrap-servers: http://mydev-db-mytest-kafka.mydev-db:9092
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      #key-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      #value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      #properties.schema.registry.url: http://localhost:9999
    producer:
      key-serializer: cnadata.consumer.cqrs.serializer.CqrsJsonSerializer
      value-serializer: cnadata.consumer.cqrs.serializer.CqrsJsonSerializer
      #value-serializer: org.apache.kafka.common.serialization.StringSerializer
      #key-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      #value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer


  sleuth:
    messaging:
      kafka:
        enabled: true
  zipkin.enabled: true

# zipkin 수집
spring.sleuth.sampler.probility: 0.1
spring.zipkin.base-url: http://zipkin.zipkin:9411

server:
  port: 8080

management.server.port: 8081

logging:
  level:
    web: INFO
    root: INFO
    cnadata: DEBUG

logging.config: file:/config/logback.xml

spring.main.allow-bean-definition-overriding: true

# management api 노출
management.endpoints.web.exposure.include: '*'
management.endpoint.health.show-details: always
# actuator/prometheus 노출
management.metrics.export.prometheus.enabled: true

# 연결 Backend 서비스 상태 확인
management.health.diskspace.enabled: true
management.health.db.enabled: true

# health liveness, readiness 노출
# Spring boot 2.3.3 이상에서는 다음과 같이 사용
management.endpoint.health.probes.enabled: true
management.health.livenessState.enabled: true
management.health.readinessstate.enabled: true

management.metrics.tags.application: ${spring.application.name}
management.metrics.distribution.percentiles-histogram.http.server.requests: true
management.metrics.distribution.percentiles-histogram.resilience4j.circuitbreaker.calls: true




--- #dev 환경
spring:
  profiles: dev
  datasource:
    url: jdbc:mariadb://a77af7a1caaaf4d84a206b39779ef098-c3ca47260c19debc.elb.ap-northeast-2.amazonaws.com/test?allowMultiQueries=true
    username: admin
    password: ywyi1004
    driver-class-name: org.mariadb.jdbc.Driver
  jpa:
    open-in-view: false
    generate-ddl: false
    show-sql: true
    hibernate:
      ddl-auto: update
      #ddl-auto: create
      #ddl-auto: create-drop
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        #physical-strategy: cnadata.outbox.util.DBLowerCaseNamingStrategy
        #physical-strategy: cnadata.outbox.util.DBUpperCaseNamingStrategy
  data:
    mongodb:
      host: a63573d6e6aa5479a9e65536e827e174-823303d80e2c5621.elb.ap-northeast-2.amazonaws.com
      username: root
      password: ywyi1004
      authentication-database: admin
      database: mydev-db
      port: 27017
