{
    "name": "mariadb-avro-source-cqrs",
    "config": {
        "connector.class": "io.debezium.connector.mysql.MySqlConnector",
        "database.hostname": "xxx",
        "database.user": "xxx",
        "database.password": "xxx",
        "database.history.kafka.bootstrap.servers": "mydev-db-mytest-kafka.mydev-db:9092",
        "database.history.kafka.topic": "cdc-schema.test",
        "event.deserialization.failure.handling.mode": "warn",
        "database.server.name": "mydev-db",
        "database.include.list": "mydev-db",
        "table.include.list": "mydev-db.PurchaseOrder,mydev-db.OrderLine",

        "heartbeat.interval.ms": "0",
        "event.processing.failure.handling.mode": "warn",
        "snapshot.delay.ms": "0",
        "include.schema.changes": "true",
        "inconsistent.schema.handling.mode": "warn",
        "decimal.handling.mode": "string",
        "snapshot.new.tables": "parallel",
        "binlog.buffer.size": "1024",
        "snapshot.fetch.size": "1024",
        "include.query": "false",
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://schema-registry-service:8080",
        "value.converter.schema.registry.url": "http://schema-registry-service:8080",
        "value.converter.schemas.enable": "true",
        "key.converter.schemas.enable": "true",
        "tombstones.on.delete" : "false",
        "transforms": "unwrap,route",
        "transforms.route.type": "org.apache.kafka.connect.transforms.RegexRouter",
        "transforms.route.regex": "([^.]+)\\.([^.]+)\\.([^.]+)",
        "transforms.route.replacement": "MyProject.$3",

        "transforms.unwrap.type" : "io.debezium.transforms.ExtractNewRecordState",
        "transforms.unwrap.drop.tombstones": "false",
        "transforms.unwrap.delete.handling.mode": "rewrite",
        "transforms.unwrap.add.fields.prefix": "",
        "transforms.unwrap.add.fields" : "table:aggregate_type,op:operation,source.ts_ms:timestamp",
        "transforms.unwrap.add.headers.prefix": "cqrs_",
        "transforms.unwrap.add.headers" : "table:aggregate_type,op:operation,source.ts_ms:timestamp",
        "transforms.unwrap.table.op.invalid.behavior": "warn"
    }
}
